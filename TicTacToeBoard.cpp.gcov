        -:    0:Source:TicTacToeBoard.cpp
        -:    0:Programs:2
        -:    1:#include "TicTacToeBoard.h"
        -:    2:/**
        -:    3: * Class for representing a 3x3 Tic-Tac-Toe game board, using the Piece enum
        -:    4: * to represent the spaces on the board.
        -:    5:**/
        -:    6:
        -:    7://Constructor sets an empty board and specifies it is X's turn first
function _ZN14TicTacToeBoardC2Ev called 6 returned 100% blocks executed 100%
        6:    8:TicTacToeBoard::TicTacToeBoard()
        -:    9:{
        6:   10:  turn = X;
       24:   11:  for(int i=0; i<BOARDSIZE; i++)
branch  0 taken 18 (fallthrough)
branch  1 taken 6
       72:   12:    for(int j=0; j<BOARDSIZE; j++)
branch  0 taken 54 (fallthrough)
branch  1 taken 18
       54:   13:      board[i][j] = Blank;
        -:   14:	
        -:   15:	//for(int i = 0; i < 2; ++i)
        -:   16:	//	lastCoordinates[i] = 0;
        6:   17:	lastTurn = Blank;
        6:   18:	gameOver = false;
        6:   19:}
        -:   20:
function _ZN14TicTacToeBoard9getStatusEv called 0 returned 0% blocks executed 0%
    #####:   21:bool TicTacToeBoard::getStatus()
        -:   22:{
    #####:   23:	return gameOver;
        -:   24:}
        -:   25:
function _ZN14TicTacToeBoard9setStatusEb called 1 returned 100% blocks executed 100%
        1:   26:void TicTacToeBoard::setStatus(bool newStatus)
        -:   27:{
        1:   28:	gameOver = newStatus;
        1:   29:}
        -:   30:
function _ZN14TicTacToeBoard8getBoardEv called 0 returned 0% blocks executed 0%
    #####:   31:Piece** TicTacToeBoard::getBoard()
        -:   32:{
    #####:   33:	Piece** ptr = 0;
    #####:   34:	for(int i = 0; i < BOARDSIZE; ++i)
branch  0 never executed
branch  1 never executed
    #####:   35:		for(int j = 0; j < BOARDSIZE; ++j)
branch  0 never executed
branch  1 never executed
    #####:   36:			ptr[i][j] = board[i][j];
        -:   37:
    #####:   38:	return ptr;
        -:   39:}
        -:   40:
function _ZN14TicTacToeBoard8setBoardERPP5Piece called 0 returned 0% blocks executed 0%
    #####:   41:void TicTacToeBoard::setBoard(Piece** &arr)
        -:   42:{
    #####:   43:	for(int i = 0; i < BOARDSIZE; ++i)
branch  0 never executed
branch  1 never executed
    #####:   44:		for(int j = 0; j < BOARDSIZE; ++j)
branch  0 never executed
branch  1 never executed
    #####:   45:			board[i][j] = **(arr + i + j * BOARDSIZE);
    #####:   46:}
        -:   47:
function _ZN14TicTacToeBoard7getTurnEv called 3 returned 100% blocks executed 100%
        3:   48:Piece TicTacToeBoard::getTurn()
        -:   49:{
        3:   50:	return turn;
        -:   51:}
        -:   52:
function _ZN14TicTacToeBoard7setTurnE5Piece called 0 returned 0% blocks executed 0%
    #####:   53:void TicTacToeBoard::setTurn(Piece newTurn)
        -:   54:{
    #####:   55:	turn = newTurn;
    #####:   56:}
        -:   57:
function _ZN14TicTacToeBoard11getLastTurnEv called 1 returned 100% blocks executed 100%
        1:   58:Piece TicTacToeBoard::getLastTurn()
        -:   59:{
        1:   60:	return lastTurn;
        -:   61:}
        -:   62:
function _ZN14TicTacToeBoard11setLastTurnE5Piece called 3 returned 100% blocks executed 100%
        3:   63:void TicTacToeBoard::setLastTurn(Piece newLast)
        -:   64:{
        3:   65:	lastTurn = newLast;
        3:   66:}
        -:   67:
        -:   68:/**
        -:   69: * Switches turn member variable to represent whether it's X's or O's turn
        -:   70: * and returns whose turn it is
        -:   71:**/
function _ZN14TicTacToeBoard10toggleTurnEv called 2 returned 100% blocks executed 75%
        2:   72:Piece TicTacToeBoard::toggleTurn()
        -:   73:{
        2:   74:	if(lastTurn != X) // last move was from O
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   75:		return X;
        -:   76:	else
        2:   77:		return O;
        -:   78:	
        -:   79:  return Invalid;
        -:   80:}
        -:   81:
        -:   82:/**
        -:   83: * Places the piece of the current turn on the board, returns what
        -:   84: * piece is placed, and toggles which Piece's turn it is. placePiece does 
        -:   85: * NOT allow to place a piece in a location where there is already a piece.
        -:   86: * In that case, placePiece just returns what is already at that location. 
        -:   87: * Out of bounds coordinates return the Piece Invalid value. When the game
        -:   88: * is over, no more pieces can be placed so attempting to place a piece
        -:   89: * should neither change the board nor change whose turn it is.
        -:   90:**/ 
function _ZN14TicTacToeBoard10placePieceEii called 4 returned 100% blocks executed 92%
        4:   91:Piece TicTacToeBoard::placePiece(int row, int column)
        -:   92:{
        -:   93:	// Check if game is ongoing
        4:   94:	if(gameOver)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:   95:	{
        -:   96:		//cout << lastTurn << endl;
        1:   97:		return Invalid;
        -:   98:	}
        -:   99:
        3:  100:	if(row < 0 || row >= BOARDSIZE || column < 0 || column >= BOARDSIZE)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 3 (fallthrough)
branch  3 taken 0
branch  4 taken 3 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 3
    #####:  101:		return Invalid;
        -:  102:
        -:  103:  Piece place;
        3:  104:	if((place = getPiece(row, column)) != Blank) // place already taken
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:  105:		return place;
        -:  106:	else // place empty
        -:  107:	{
        2:  108:		board[row][column] = turn; // set place
        -:  109:		// check for winner
        2:  110:		lastTurn = turn;
        2:  111:		Piece returnPiece = getWinner(); // get winner if there is one, else get next turn
call    0 returned 2
        -:  112:
        2:  113:		return returnPiece;
        -:  114:	}
        -:  115:}
        -:  116:
        -:  117:/**
        -:  118: * Returns what piece is at the provided coordinates, or Blank if there
        -:  119: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:  120:**/
function _ZN14TicTacToeBoard8getPieceEii called 5 returned 100% blocks executed 100%
        5:  121:Piece TicTacToeBoard::getPiece(int row, int column)
        -:  122:{
        5:  123:	return board[row][column];
        -:  124:}
        -:  125:
        -:  126:/**
        -:  127: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:  128: * is not over, or Blank if the board is filled and no one has won.
        -:  129:**/
function _ZN14TicTacToeBoard9getWinnerEv called 2 returned 100% blocks executed 52%
        2:  130:Piece TicTacToeBoard::getWinner()
        -:  131:{
        -:  132:	//return lastTurn;
        -:  133:	// horizontal check
        2:  134:	int tally = 1;
        8:  135:	for(int i = 0; i < BOARDSIZE; ++i)
branch  0 taken 6 (fallthrough)
branch  1 taken 2
        -:  136:	{
        6:  137:		Piece currentPiece = board[i][0];
        6:  138:		if(currentPiece != X || currentPiece != O)
branch  0 taken 2 (fallthrough)
branch  1 taken 4
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        6:  139:			continue;
        -:  140:
    #####:  141:		for(int j = 1; j < BOARDSIZE; ++j)
branch  0 never executed
branch  1 never executed
        -:  142:		{
    #####:  143:			if(board[i][j] != currentPiece)
branch  0 never executed
branch  1 never executed
        -:  144:			{
    #####:  145:				tally = 1;
    #####:  146:				break;
        -:  147:			}
        -:  148:
    #####:  149:			if(++tally == 3)
branch  0 never executed
branch  1 never executed
        -:  150:			{
    #####:  151:				gameOver = true;
    #####:  152:				return currentPiece;
        -:  153:			}
        -:  154:		}
        -:  155:	}
        -:  156:
        -:  157:	// vertical check
        8:  158:	for(int j = 0; j < BOARDSIZE; ++j)
branch  0 taken 6 (fallthrough)
branch  1 taken 2
        -:  159:  {
        6:  160:    Piece currentPiece = board[j][0];
        6:  161:    if(currentPiece != X || currentPiece != O)
branch  0 taken 2 (fallthrough)
branch  1 taken 4
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        6:  162:		  continue;
        -:  163:
    #####:  164:    for(int i = 1; i < BOARDSIZE; ++i)
branch  0 never executed
branch  1 never executed
        -:  165:    {
    #####:  166:      if(board[i][j] != currentPiece)
branch  0 never executed
branch  1 never executed
        -:  167:      {
    #####:  168:        tally = 1;
    #####:  169:        break;
        -:  170:			}
        -:  171:
    #####:  172:      if(++tally == 3)
branch  0 never executed
branch  1 never executed
        -:  173:      {
    #####:  174:        gameOver = true;
    #####:  175:				return currentPiece;
        -:  176:      }
        -:  177:		}
        -:  178:	}
        -:  179:
        -:  180:	// diagonal checks
        2:  181:	tally = 1;
        2:  182:	Piece currentPiece = board[0][0];
        6:  183:	for(int i = 1; i < BOARDSIZE; ++i)
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        -:  184:	{
        4:  185:		if(currentPiece != X || currentPiece != O)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        4:  186:			continue;
        -:  187:
    #####:  188:		if(board[i][i] != currentPiece)
branch  0 never executed
branch  1 never executed
        -:  189:		{
    #####:  190:			tally = 1;
    #####:  191:			break;
        -:  192:		}
        -:  193:
    #####:  194:		if(++tally == 3)
branch  0 never executed
branch  1 never executed
        -:  195:		{
    #####:  196:			gameOver = true;
    #####:  197:			return currentPiece;
        -:  198:		}
        -:  199:	}
        -:  200:
        2:  201:  tally = 1;
        2:  202:  currentPiece = board[2][0];
        6:  203:	for(int j = 1; j < BOARDSIZE; ++j)
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        -:  204:	{
        4:  205:    if(currentPiece != X || currentPiece != O)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
branch  2 never executed
branch  3 never executed
        4:  206:		  continue;
        -:  207:
    #####:  208:    if(board[2][j] != currentPiece)
branch  0 never executed
branch  1 never executed
        -:  209:    {
    #####:  210:      tally = 1;
    #####:  211:      break;
        -:  212:    }
        -:  213:
    #####:  214:    if(++tally == 3)
branch  0 never executed
branch  1 never executed
        -:  215:    {
    #####:  216:      gameOver = true;
    #####:  217:      return currentPiece;
        -:  218:    }
        -:  219:  }
        -:  220:
        -:  221:	// no winner, return nex turn
        2:  222:	return toggleTurn();
call    0 returned 2
function _GLOBAL__sub_I__ZN14TicTacToeBoardC2Ev called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  223:}
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
